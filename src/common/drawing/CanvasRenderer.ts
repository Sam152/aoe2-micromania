import { ClientDispatcher, ClientState, GameState, Rectangle, RendererInterface } from "../../types";
import unitMetadataFactory from "../units/unitMetadataFactory";
import { square } from "./shapes";
import screenManager from "./screenManager";
import { Vector2 } from "three/src/math/Vector2";
import config from "../config";
import AnimationStyle from "../units/AnimationStyle";
import Grid from "../terrain/Grid";
import UnitState from "../units/UnitState";
import pointInRect from "../util/pointInRect";
import calculateUnitMovementPerTick from "../units/calculateUnitMovementPerTick";
import getArrowPosition from "./helpers/getArrowPosition";
import projectileMetadata from "../units/projectileMetadata";
import ActiveCommand from "../input/ActiveCommand";
import unitsInGameState from "../util/unitsInGameState";
import DebugRenderer from "./DebugRenderer";
import slpManager from "./SlpManager";
import selectionCircle from "./helpers/selectionCircle";
import ProjectileType from "../units/ProjectileType";

export default class CanvasRenderer implements RendererInterface {
  public canvas: HTMLCanvasElement;
  public context: CanvasRenderingContext2D;
  lastRenderedGameTick: number;
  frameAtLastRenderedTick: number;
  framesPerTick: number;
  fractionOfTickRendered: number;
  private lastCursor: string | null;
  private debugRenderer: RendererInterface;

  constructor(canvas: HTMLCanvasElement) {
    this.canvas = canvas;
    this.context = this.canvas.getContext("2d");

    this.lastRenderedGameTick = 0;
    this.frameAtLastRenderedTick = 0;
    this.fractionOfTickRendered = 0;
    this.framesPerTick = 0;

    // @ts-ignore
    window.ctx = this.context;

    this.lastCursor = null;

    this.debugRenderer = new DebugRenderer(canvas);

    this.fit();
    screenManager.onChange(this.fit.bind(this));

    // this.canvas.addEventListener('click', element => {
    //    // @ts-ignore
    //     element.target.requestPointerLock();
    // });
  }

  fit() {
    this.context.canvas.width = window.innerWidth * screenManager.getCanvasScale();
    this.context.canvas.height = (window.innerHeight - screenManager.getTopOffset()) * screenManager.getCanvasScale();
  }

  getSize(): Vector2 {
    return new Vector2(this.context.canvas.width, this.context.canvas.height);
  }

  bootUp(): Promise<void> {
    return slpManager.downloadPreRenderAll();
  }

  render(gameState: GameState, clientState: ClientState, clientStateDispatcher: ClientDispatcher): void {
    // Attempt to smooth out the rendering of game ticks, which are slower than how often a frame is rendered, by
    // calculating what fraction of a game tick we are through. This requires us to record what frame we were at
    // when a new tick is started, how many have passed since the last tick and an estimate of the total frames that
    // are rendered for each tick.
    if (gameState.ticks !== this.lastRenderedGameTick) {
      // Attempt to guess the frames per tick.
      this.framesPerTick = clientState.renderedFrames - this.frameAtLastRenderedTick;
      // Record the rendered tick and the frame we are rendering.
      this.lastRenderedGameTick = gameState.ticks;
      this.frameAtLastRenderedTick = clientState.renderedFrames;
    }
    this.fractionOfTickRendered = gameState.gameEnded
      ? 1
      : (clientState.renderedFrames - this.frameAtLastRenderedTick) / this.framesPerTick;

    this.context.clearRect(0, 0, this.canvas.width, this.canvas.width);

    this.translateCamera(clientState.camera);
    this.drawTerrain(gameState);
    this.drawFallenUnits(gameState);
    this.drawUnits(gameState, clientState, clientStateDispatcher);
    this.drawProjectiles(gameState, clientState, clientStateDispatcher);
    this.drawMovementCommandAnimations(gameState, clientState);
    this.drawSelectionRectangle(this.context, clientState.selectionRectangle);
    this.renderMouse(clientState, gameState);

    if (config.debug) {
      this.debugRenderer.render(gameState, clientState, clientStateDispatcher);
    }

    this.context.setTransform(1, 0, 0, 1, 0, 0);
  }

  translateCamera(camera: Vector2): void {
    this.context.translate(-camera.x, -camera.y);
  }

  drawTerrain(gameState: GameState): void {
    const terrain = slpManager.getAsset(gameState.mapTerrain);
    const grid = new Grid(gameState.mapSize);

    // Terrain drawing algo documented at https://simonsan.github.io/openage-webdocs/sphinx/doc/media/terrain.html.
    const terrainCount = Math.sqrt(terrain.getFramesCount());
    grid.iterateTiles((x, y) => {
      const frame = (x % terrainCount) + (y % terrainCount) * terrainCount;
      terrain.drawFrame(this.context, grid.tileDrawnAt(x, y), frame);
    });
  }

  drawMovementCommandAnimations(gameState: GameState, clientState: ClientState): void {
    const flag = slpManager.getAsset("interface/dc_b_misc_waypoint_flag_x1");
    unitsInGameState(gameState, clientState.selectedUnits).forEach((selectedUnit) =>
      selectedUnit.clickedWaypoints.forEach((waypoint) => {
        flag.animateAsset(this.context, new Vector2(waypoint.x, waypoint.y), 3, gameState.ticks);
      }),
    );
    if (clientState.lastMoveClick) {
      const asset = slpManager.getAsset("interface/MOVETO");
      const [position, startedTick] = clientState.lastMoveClick;
      asset.animateAsset(this.context, position, 3, clientState.renderedFrames - startedTick, AnimationStyle.Play);
    }
  }

  drawProjectiles(gameState: GameState, clientState: ClientState, clientStateDispatcher: ClientDispatcher): void {
    gameState.projectiles.forEach((projectile) => {
      const projectileInfo = projectileMetadata[projectile.type];

      const totalTicksInJourney = projectile.arrivingTick - projectile.startingTick;
      const ticksOfJourneyComplete = gameState.ticks - projectile.startingTick + this.fractionOfTickRendered;
      const percentageComplete = Math.min(1, ticksOfJourneyComplete / totalTicksInJourney);

      const positionPrevious = getArrowPosition(projectile, Math.max(0, percentageComplete - 0.1));
      const position = getArrowPosition(projectile, percentageComplete);
      const angle = position.clone().sub(positionPrevious).angle();

      slpManager
        .getAsset(projectileInfo.asset)
        .drawFrame(
          this.context,
          position,
          projectileInfo.frames[projectile.id % projectileInfo.frames.length],
          angle + Math.PI * (projectile.type === ProjectileType.Arrow ? 1.5 : 3),
        );
    });
  }

  drawUnits(gameState: GameState, clientState: ClientState, clientStateDispatcher: ClientDispatcher) {
    const unitsAndPosition = gameState.units
      // Compute positions in advance, so multiple loops can use them.
      .map((unitInstance) => {
        const movementVector = calculateUnitMovementPerTick(unitInstance);
        const interpolatedPosition = movementVector
          ? unitInstance.position.clone().add(movementVector.multiplyScalar(this.fractionOfTickRendered))
          : unitInstance.position;
        return {
          unitInstance,
          interpolatedPosition,
        };
      })
      // Sort by the units y position, so that units don't appear to stand on each others heads.
      .sort((a, b) => a.interpolatedPosition.y - b.interpolatedPosition.y);

    // Draw all selection circles first, so units appear on top of them.
    unitsAndPosition
      .filter(({ unitInstance }) => clientState.selectedUnits.includes(unitInstance.id))
      .forEach((unitAndPosition) => {
        const unitMetadata = unitMetadataFactory.getUnit(unitAndPosition.unitInstance.unitType);
        selectionCircle(
          this.context,
          unitMetadata.selectionRadius,
          "rgba(255, 255, 255, 1)",
          unitAndPosition.interpolatedPosition,
        );
      });

    unitsAndPosition.forEach(({ interpolatedPosition, unitInstance }) => {
      const unitMetadata = unitMetadataFactory.getUnit(unitInstance.unitType);

      if (clientState.lastAttackedUnit && clientState.lastAttackedUnit[0] === unitInstance.id) {
        const framesSinceAttacked = clientState.renderedFrames - clientState.lastAttackedUnit[1];
        if (Math.ceil(framesSinceAttacked / 8) % 2 !== 0 && framesSinceAttacked < 32) {
          selectionCircle(this.context, unitMetadata.selectionRadius, "rgba(64, 189, 58, 1)", interpolatedPosition);
        }
      }

      const animationMetadata = unitMetadata.animations[unitInstance.unitState];
      const slp = slpManager.getAsset(animationMetadata.slp);
      const animationDuration = animationMetadata.animationDuration / (unitInstance.reformingSpeedFactor || 1);
      const hitBox = slp.animatePlayerAsset(
        this.context,
        interpolatedPosition,
        animationDuration,
        gameState.ticks - unitInstance.unitStateStartedAt,
        unitInstance.ownedByPlayer,
        unitInstance.direction,
        animationMetadata.style,
      );

      if (unitInstance.hitPoints !== unitMetadata.hitPoints) {
        const anchoredAt = unitInstance.position;
        const hpBarWidth = 40;

        const hpLeft = unitInstance.hitPoints / unitMetadata.hitPoints;
        this.context.beginPath();
        this.context.fillStyle = "black";
        this.context.fillRect(
          anchoredAt.x - hpBarWidth / 2,
          anchoredAt.y + unitMetadata.hitPointsBarAnchor,
          hpBarWidth,
          6,
        );

        this.context.beginPath();
        this.context.fillStyle = "green";
        this.context.fillRect(
          anchoredAt.x - hpBarWidth / 2 + 1,
          anchoredAt.y + unitMetadata.hitPointsBarAnchor + 1,
          (hpBarWidth - 2) * hpLeft,
          4,
        );
      }

      clientStateDispatcher({
        n: "UNIT_DRAWN",
        hitBox,
        unit: unitInstance,
      });
    });
  }

  drawFallenUnits(gameState: GameState) {
    gameState.fallenUnits.map((unitInstance) => {
      const unitMetadata = unitMetadataFactory.getUnit(unitInstance.unitType);

      const ticksUntilDecay = 100;
      const ticksSinceFallen = gameState.ticks - unitInstance.unitFallenAt;
      const animationMetadata =
        unitMetadata.animations[ticksSinceFallen < ticksUntilDecay ? UnitState.Falling : UnitState.Decaying];

      const slp = slpManager.getAsset(animationMetadata.slp);
      slp.animatePlayerAsset(
        this.context,
        unitInstance.position,
        animationMetadata.animationDuration,
        ticksSinceFallen < ticksUntilDecay ? ticksSinceFallen : ticksSinceFallen - ticksUntilDecay,
        unitInstance.ownedByPlayer,
        unitInstance.direction,
        animationMetadata.style,
      );
    });
  }

  drawSelectionRectangle(context: CanvasRenderingContext2D, selection: Rectangle | null) {
    if (!selection) {
      return;
    }
    const nudgeFactor = 1;
    square(context, selection, "black", 1);
    square(
      context,
      {
        p1: new Vector2(selection.p1.x - nudgeFactor, selection.p1.y - nudgeFactor),
        p2: new Vector2(selection.p2.x - nudgeFactor, selection.p2.y - nudgeFactor),
      },
      "white",
      1,
    );
  }

  renderMouse(state: ClientState, gameState: GameState) {
    const playingAs = gameState.activePlayers[state.clientId] ?? -1;

    let cursor: Cursor;
    if (state.activeCommand === ActiveCommand.Default) {
      const attacking =
        state.selectedUnits.length > 0 &&
        state.unitHitBoxes
          .filter(({ unit }) => unit.ownedByPlayer !== playingAs)
          .find((unitAndHitBox) => pointInRect(unitAndHitBox.hitBox, state.mousePosition));
      cursor = attacking ? "attack" : "default";
    } else {
      cursor = activeCommandMap[state.activeCommand];
    }

    if (cursor !== this.lastCursor) {
      this.canvas.style.cursor = `url("data:image/png;base64,${cursorFiles[cursor]}") ${anchorMap[cursor]}, none`;
      this.lastCursor = cursor;
    }
  }
}

type Cursor = "default" | "attack" | "area_attack" | "patrol";

const activeCommandMap: Record<ActiveCommand, Cursor> = {
  [ActiveCommand.AttackGround]: "area_attack",
  [ActiveCommand.Patrol]: "patrol",
  [ActiveCommand.Default]: "default",
};

const cursorFiles: Record<Cursor, string> = {
  attack:
    "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",
  area_attack:
    "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",
  patrol:
    "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",
  default:
    "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",
};
const anchorMap: { [key in Cursor]: string } = {
  default: "0 0",
  area_attack: "0 0",
  patrol: "0 0",
  attack: "0 0",
};
